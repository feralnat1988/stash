scalar Upload

input GenerateMetadataInput {
  sprites: Boolean!
  previews: Boolean!
  imagePreviews: Boolean!
  previewOptions: GeneratePreviewOptionsInput
  markers: Boolean!
  markerImagePreviews: Boolean!
  markerScreenshots: Boolean!
  transcodes: Boolean!
  phashes: Boolean!

  """scene ids to generate for"""
  sceneIDs: [ID!]
  """marker ids to generate for"""
  markerIDs: [ID!]

  """overwrite existing media"""
  overwrite: Boolean
}

input GeneratePreviewOptionsInput {
  """Number of segments in a preview file"""
  previewSegments: Int
  """Preview segment duration, in seconds"""
  previewSegmentDuration: Float
  """Duration of start of video to exclude when generating previews"""
  previewExcludeStart: String
  """Duration of end of video to exclude when generating previews"""
  previewExcludeEnd: String
  """Preset when generating preview"""
  previewPreset: PreviewPreset
}

input ScanMetadataInput {
  paths: [String!]
  """Set name, date, details from metadata (if present)"""
  useFileMetadata: Boolean
  """Strip file extension from title"""
  stripFileExtension: Boolean
  """Generate previews during scan"""
  scanGeneratePreviews: Boolean
  """Generate image previews during scan"""
  scanGenerateImagePreviews: Boolean
  """Generate sprites during scan"""
  scanGenerateSprites: Boolean
  """Generate phashes during scan"""
  scanGeneratePhashes: Boolean
}

input CleanMetadataInput {
  """Do a dry run. Don't delete any files"""
  dryRun: Boolean!
}

input AutoTagMetadataInput {
  """Paths to tag, null for all files"""
  paths: [String!]
  """IDs of performers to tag files with, or "*" for all"""
  performers: [String!]
  """IDs of studios to tag files with, or "*" for all"""
  studios: [String!]
  """IDs of tags to tag files with, or "*" for all"""
  tags: [String!]
}

input ExportObjectTypeInput {
  ids: [String!]
  all: Boolean
}

input ExportObjectsInput {
  scenes: ExportObjectTypeInput
  images: ExportObjectTypeInput
  studios: ExportObjectTypeInput
  performers: ExportObjectTypeInput
  tags: ExportObjectTypeInput
  movies: ExportObjectTypeInput
  galleries: ExportObjectTypeInput
  includeDependencies: Boolean
}

enum ImportDuplicateEnum {
  IGNORE
  OVERWRITE
  FAIL
}

enum ImportMissingRefEnum {
  IGNORE
  FAIL
  CREATE
}

input ImportObjectsInput {
  file: Upload!
  duplicateBehaviour: ImportDuplicateEnum!
  missingRefBehaviour: ImportMissingRefEnum!
}

input BackupDatabaseInput {
  download: Boolean
}

enum SystemStatusEnum {
  SETUP
  NEEDS_MIGRATION
  OK
}

type SystemStatus {
  databaseSchema: Int
  databasePath: String
  configPath: String
  appSchema: Int!
  status: SystemStatusEnum!
}

input MigrateInput {
  backupPath: String!
}
